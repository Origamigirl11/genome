#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above 'Genome';
use Test::More tests => 7;
use Test::Exception;
use Genome::Utility::Test qw(compare_ok);

my $test_dir = Genome::Config::get('test_inputs') . '/Genome-Model-SomaticVariation-Command-SimplifyVcf';
my $test_input_dir = "$test_dir/input.v1";
my $build_variants_dir = "$test_input_dir/variants";
Genome::Sys->create_directory($build_variants_dir);
my $output_dir = File::Temp::tempdir('Genome-Model-SomaticVariation-Command-SimplifyVcf-XXXXX', CLEANUP => 1, TMPDIR => 1);

my $indel_vcf = "$build_variants_dir/indels.vcf.gz";
my $snv_vcf = "$build_variants_dir/snvs.vcf.gz";

my $expected_dir = "$test_dir/expected.v1";
my $expected_snv_vcf = "$expected_dir/expected.snvs.vcf";
my $expected_indel_vcf = "$expected_dir/expected.indels.vcf";
my $expected_combined_vcf = "$expected_dir/expected.combined.vcf";

# Create the result for the indel variant list

my $class = "Genome::Model::SomaticVariation::Command::SimplifyVcf";
use_ok($class);

# Make the minimum amount of fake stuff to make this work
my $pp = Genome::ProcessingProfile::ReferenceAlignment->__define__(sequencing_platform => "solexa", type_name => "reference alignment");
my $pp_somvar = Genome::ProcessingProfile::SomaticVariation->__define__(type_name => "somatic variation");
my $subject = Genome::Subject->__define__( name => "test_subject_for_simplify_vcf", common_name => "common_name", subclass_name => "Genome::Sample");

my $tumor_subject = Genome::Subject->__define__( name => "H_KU-16454-D925307", subclass_name => "Genome::Sample"); # This name must match the input vcf test data
my $tumor_model = Genome::Model::ReferenceAlignment->__define__(subject => $tumor_subject, processing_profile => $pp, processing_profile_id => $pp->id);
my $tumor_build = Genome::Model::Build->create( model_id => $tumor_model->id, data_directory => $test_input_dir,);

my $normal_subject = Genome::Subject->__define__( name => "H_KU-16454-gl926886", subclass_name => "Genome::Sample"); # This name must match the input vcf test data
my $normal_model = Genome::Model::ReferenceAlignment->__define__(subject => $normal_subject, processing_profile => $pp, processing_profile_id => $pp->id);
my $normal_build = Genome::Model::Build->create( model_id => $normal_model->id, data_directory => $test_input_dir,);

my $model = Genome::Model::SomaticVariation->__define__( processing_profile=> $pp_somvar,processing_profile_id => $pp_somvar->id, subject => $subject, tumor_model => $tumor_model, normal_model => $normal_model);
my $build = Genome::Model::Build::SomaticVariation->__define__( data_directory => $test_input_dir, model => $model, normal_build =>$normal_build, tumor_build => $tumor_build);

my $command = $class->create(
    builds => [$build],
    outdir => $output_dir,
    include_and_merge_indels => 1, 
);
isa_ok($command, $class);

ok($command->execute, "Executed the $class command");
my $output_snv_vcf = $command->resolve_snv_vcf_filename($build);
my $output_indel_vcf = $command->resolve_indel_vcf_filename($build);
my $output_combined_vcf = $command->resolve_combined_vcf_filename($build);

# Diff files vs expected
compare_ok($expected_snv_vcf, $output_snv_vcf, filters => qr(^##fileDate=.*));
compare_ok($expected_indel_vcf, $output_indel_vcf, filters => qr(^##fileDate=.*));
compare_ok($expected_combined_vcf, $output_combined_vcf, filters => qr(^##fileDate=.*));

subtest 'unfiltered variants' => sub {
    my $input_with_unfiltered_variant = "$test_dir/input_unfiltered.v1";
    my $build2 = Genome::Model::Build::SomaticVariation->__define__(
        data_directory => $input_with_unfiltered_variant,
        model => $model,
        normal_build =>$normal_build,
        tumor_build => $tumor_build
    );

    subtest 'unfiltered_status = undef crashes' => sub {
        my $output_dir = Genome::Sys->create_temp_directory();
        my $cmd = $class->create(
            builds => [$build2],
            outdir => $output_dir,
            include_and_merge_indels => 0,
            unfiltered_status => undef,
        );
        isa_ok($cmd, $class);
        dies_ok(sub { $cmd->execute }, 'fails with undef unfiltered status');
    };

    subtest 'included when unfiltered_status = pass' => sub {
        my $output_dir = Genome::Sys->create_temp_directory();
        my $cmd = $class->create(
            builds => [$build2],
            outdir => $output_dir,
            include_and_merge_indels => 0,
            unfiltered_status => 'pass',
        );
        isa_ok($cmd, $class);
        ok($cmd->execute, 'executed command');

        my $output_file = $cmd->resolve_snv_vcf_filename($build2);
        my @lines = grep { $_ !~ /^#/ } Genome::Sys->read_file($output_file);
        is(scalar(@lines), 1, 'variant was included');
    };

    subtest 'not included when unfiltered_status = fail' => sub {
        my $output_dir = Genome::Sys->create_temp_directory();
        my $cmd = $class->create(
            builds => [$build2],
            outdir => $output_dir,
            include_and_merge_indels => 0,
            unfiltered_status => 'fail',
        );
        isa_ok($cmd, $class);
        ok($cmd->execute, 'executed command');

        my $output_file = $cmd->resolve_snv_vcf_filename($build2);
        my @lines = grep { $_ !~ /^#/ } Genome::Sys->read_file($output_file);
        is(scalar(@lines), 0, 'variant was not included');
    };
};
