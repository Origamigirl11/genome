#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
}

use strict;
use warnings;

use above "Genome";

use Test::More;

use_ok('Genome::InstrumentData::Microarray') or die;

my $instrument_data = Genome::InstrumentData::Imported->create(
    id => -11,
    library => Genome::Library->get(sample_id=>2850539269, name=>'TEST-patient1-sample1-lib1'),
    import_format => 'genotype file',
    sequencing_platform => 'test',
); 
ok($instrument_data, 'created dummy instrument data');

ok(!$instrument_data->genotype_file, 'no genotype file, yet');

test_update_genotype_file(Genome::Config::get('test_inputs') . '/Genome-InstrumentData-Microarray/test_genotype_file1');
# works also if there is already an existing gentoype_file associated with the instrument_data...


test_update_genotype_file(Genome::Config::get('test_inputs') . '/Genome-InstrumentData-Microarray/test_genotype_file2');

done_testing();

sub test_update_genotype_file {
    my ($new_genotype_file) = @_;

    # update
    my $update_ok = $instrument_data->update_genotype_file($new_genotype_file);
    ok($update_ok, 'update genotype file');

    # no genotype file attr created 
    my $attr = $instrument_data->attributes(attribute_label => 'genotype_file');
    ok(!$attr, 'no genotype file attr');

    # genotype file name attr created
    $attr = $instrument_data->attributes(attribute_label => 'genotype_file_name');
    ok($attr, 'genotype file name attr');
    my $genotype_file_name = $attr->attribute_value;
    is($genotype_file_name, $instrument_data->sample->id.'.genotype', 'genotype file name is correct');

    # genotype file method works
    my $genotype_file = $instrument_data->genotype_file;
    is($genotype_file, join('/', $instrument_data->disk_allocation->absolute_path, $genotype_file_name), 'genotype file matches');
    ok(-s $genotype_file, 'genotype file copied');

    return 1;
}

